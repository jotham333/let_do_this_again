#include "shell.h"

/**
 * main - entry point
 * @ac: arg count
 * @av: arg vector
 *
 * Return: 0 on success, 1 on error
 */
int main(int ac, char **av)
{
  /* Initialize info struct */
	info_t info[] = { INFO_INIT };
	int fd = 2; /* Initialize fd to 2 (stderr)*/

	/* Use inline assembly to increment fd by 3 */
	asm ("mov %1, %0\n\t"
		"add $3, %0"
		: "=r" (fd)
		: "r" (fd));
	while (ac == 2)/* Check if there is one command-line argument */
	{
	  /* Open file specified in command-line argument for reading */
		fd = open(av[1], O_RDONLY);
		if (fd == -1)
		{
		  /* If open() returns -1, there was an error */
			/* Check if error is due to permission denied */
			if (errno == EACCES)
				exit(126);
			if (errno == ENOENT)/* Check if error is due to file not found */
			{
			  /* Print error message and exit with status 127 */
				_eputs(av[0]);
				_eputs(": 0: Can't open ");
				_eputs(av[1]);
				_eputchar('\n');
				_eputchar(BUF_FLUSH);
				exit(127);
			}
			/* If error is not due to permission denied or file not found, exit with failure */
			return (EXIT_FAILURE);
		}
		/* Set readfd in info struct to file descriptor returned by open() */
		info->readfd = fd;
		/* Exit loop */
		break;
	}

	/* Populate environment list */
	populate_env_list(info);
	/* Read command history */
	read_history(info);
	/* Run the shell */
	hsh(info, av);
	/* Exit with success status */
	return (EXIT_SUCCESS);
}
